{"version":3,"sources":["firebaseConfig.js","firebase.js","components/PokemonList.js","components/Timer.js","components/Header.js","components/StartScreen.js","components/Dropdown.js","components/TargetBox.js","components/Feedback.js","util.js","components/GameScreen.js","components/EndScreen.js","components/Main.js","App.js","index.js"],"names":["firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firebase","initializeApp","PokemonList","useState","imageList","setImageList","useEffect","storage","imageNames","ref","list","then","ListResult","urlList","items","map","imageRef","push","name","getDownloadURL","Promise","all","imagesInfo","url","index","catch","error","console","log","length","image","src","alt","Timer","startTimeRef","useRef","Date","now","current","currTime","setCurrTime","timer","setInterval","clearInterval","Math","floor","Header","props","gameEnded","className","gameStarted","StartScreen","onClick","startGame","Dropdown","top","left","foundPokemon","boxDimensions","window","innerWidth","style","handleClick","choices","choice","id","TargetBox","Feedback","message","pokemonName","computeCoordinateRanges","x","y","mainImage","document","getElementById","imgWidth","scrollWidth","imgHeight","scrollHeight","xMin","xMax","headerHeight","innerHeight","yMin","yMax","GameScreen","coords","setCoords","searchList","setSearchList","userSelection","setUserSelection","setFoundPokemon","userId","a","firestore","collection","doc","set","startTime","FieldValue","serverTimestamp","setupNewUser","imageURL","get","DocumentSnapshot","pokemonList","data","remainingPokemon","pokemon","found","db","pokemonDataSnapshot","pokemonData","xMinServer","xMaxServer","yMinServer","yMaxServer","foundAllPokemon","currID","update","endTime","merge","endGame","validateSelection","click","target","tagName","selectionID","selectionName","textContent","xCoord","pageX","yCoord","pageY","href","rel","EndScreen","totalTime","setTotalTime","timestamps","seconds","calculateTime","Main","userIdRef","add","userDoc","createNewUserDoc","App","setGameStarted","setGameEnded","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.f1062649.chunk.js","sourcesContent":["const firebaseConfig = {\n    apiKey: \"AIzaSyA7lyPyI42XBZIvt4c05DVfw87Tu-4IqZU\",\n    authDomain: \"wheres-waldo-odin-jp.firebaseapp.com\",\n    projectId: \"wheres-waldo-odin-jp\",\n    storageBucket: \"wheres-waldo-odin-jp.appspot.com\",\n    messagingSenderId: \"179199665105\",\n    appId: \"1:179199665105:web:6e232fa769b6e39befb6f0\"\n};\n\nexport default firebaseConfig;","import firebase from \"firebase/app\";\nimport firebaseConfig from \"./firebaseConfig\";\n\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import { useState, useEffect } from \"react\";\nimport firebase from \"../firebase\";\nimport \"firebase/storage\";\n\nfunction PokemonList() {\n    const [imageList, setImageList] = useState([]);\n\n    //on mount, get image list from firebase\n    useEffect(function getImageList() {\n        var storage = firebase.storage();\n        var imageNames = [];\n        storage.ref(\"to-find\").list()\n        .then((ListResult) => {\n            var imageRefList = ListResult.items;\n            var urlList = imageRefList.map((imageRef) => {\n                imageNames.push(imageRef.name);\n                return imageRef.getDownloadURL();\n            });\n            return Promise.all(urlList);\n        })\n        .then((urlList) => {\n            //wrap url and name in an object for each image\n            var imagesInfo = urlList.map((url, index) => {\n                return {url, name: imageNames[index]};\n            });\n            setImageList(imagesInfo);\n        })\n        .catch((error) => {\n            console.log(\"Error retrieving images: \", error);\n        });\n    }, []);\n\n    if (imageList.length > 0) {\n        return (\n            <ul>\n                {imageList.map((image, index) => {\n                    return (\n                        <li key={index}>\n                            <img src={image.url} alt={image.name} />\n                        </li>\n                    );\n                })}\n            </ul>\n        );\n    }\n\n    return (\n        <p>Loading images...</p>\n    );\n}\n\nexport default PokemonList;","import { useState, useRef, useEffect } from \"react\";\n\nfunction Timer() {\n    const startTimeRef = useRef(Date.now());\n    \n    const [currTime, setCurrTime] = useState(startTimeRef.current);\n\n    useEffect(() => {\n        var timer = setInterval(() => {\n            setCurrTime(Date.now());\n        }, 1000);\n\n        return () => {\n            clearInterval(timer);\n        };\n    }, []);\n\n    return (\n        <p>{Math.floor((currTime - startTimeRef.current) / 1000)}</p>\n    );\n}\n\nexport default Timer;","import PokemonList from \"./PokemonList\";\nimport Timer from \"./Timer\";\n\nfunction Header(props) {\n    return (\n        <header>\n            <h1>\n                {(props.gameEnded)\n                    ? \"You Caught 'Em All!\"\n                    : \"Gotta Catch 'Em All!\"\n                }\n            </h1>\n            <div className=\"progress-bar\">\n                {(props.gameEnded)\n                    ? <PokemonList />\n                    : (props.gameStarted) \n                    ? <>\n                        <PokemonList /> \n                        <Timer />\n                    </>\n                    : false\n                }\n            </div>\n        </header>\n    );\n}\n\nexport default Header;","import PokemonList from \"./PokemonList\";\n\nfunction StartScreen(props) {\n    return (\n        <div className=\"start-screen\">\n            <p>Can you find and catch these Pokémon?</p>\n            <p>Click to capture.</p>\n            <PokemonList />\n            <button onClick={props.startGame}>Start</button>\n        </div>\n    );\n}\n\nexport default StartScreen;","function Dropdown(props) {\n    var top = props.top;\n    var left = props.left;\n\n    //if props.foundPokemon has a value (true or false)\n    //then player selection has been validated\n    //and dropdown box should not be rendered\n    if (\n        top !== null && left !== null \n        && props.foundPokemon === null\n    ) {\n        //calculate target box dimensions using CSS rule for .target-box\n        var boxDimensions = (window.innerWidth > 1000) \n            ? 100 + 10 : window.innerWidth / 10 + 10;\n\n        //position dropdown box to bottom right corner of target box\n        //later - change position if click on image edge\n        top += boxDimensions / 2;\n        left += boxDimensions / 2;\n\n        return (\n            <div \n                className=\"dropdown-box\"\n                style={{top: top, left: left}}\n            >\n                <ul onClick={props.handleClick}>\n                    {/* how to sort names? */}\n                    {props.choices.map((choice) => {\n                        return (\n                            <li key={choice.id}>\n                                <button id={choice.id}>{choice.name}</button>\n                            </li>\n                        );\n                    })}\n                </ul>\n            </div>\n        );\n    }\n\n    return null;\n}\n\nexport default Dropdown;","function TargetBox(props) {\n    var top = props.top;\n    var left = props.left;\n\n    //if props.foundPokemon has a value (true or false)\n    //then player selection has been validated\n    //and target box should not be rendered\n    if (\n        top !== null && left !== null \n        && props.foundPokemon === null\n    ) {\n        //calculate target box dimensions using CSS rule for .target-box\n        var boxDimensions = (window.innerWidth > 1000) \n            ? 100 + 10 : window.innerWidth / 10 + 10;\n\n        //center target box on click site\n        top -= boxDimensions / 2;\n        left -= boxDimensions / 2;\n\n        return (\n            <div \n                className=\"target-box\"\n                style={{top: top, left: left}}\n            >\n            </div>\n        );\n    }\n\n    return null;\n}\n\nexport default TargetBox;","function Feedback(props) {\n    //if props.foundPokemon has a value (true or false)\n    //then player selection has been validated\n    //and feedback should be rendered\n    if (props.foundPokemon !== null) {\n        var message = props.foundPokemon\n            ? `You found ${props.pokemonName}!` \n            : `That's not ${props.pokemonName}`;\n\n        return (\n            <div className={\"feedback-\" + props.foundPokemon}\n                style={{top: props.top, left: props.left}}\n            >\n                <p>{message}</p>\n            </div>\n        );\n    }\n    \n    return null;\n}\n\nexport default Feedback;","export function computeCoordinateRanges(x, y) {\n    //calculate target box dimensions using CSS rule for .target-box\n    var boxDimensions = (window.innerWidth > 1000) \n        ? 100 + 10 : window.innerWidth / 10 + 10;\n\n    //get main image dimensions\n    var mainImage = document.getElementById(\"main-image\");\n    var imgWidth = mainImage.scrollWidth;\n    var imgHeight = mainImage.scrollHeight;\n\n    //given area of target box,\n    //calculate x and y ranges relative to position of image\n    var xMin = (x - boxDimensions / 2) / imgWidth;\n    var xMax = (x + boxDimensions / 2) / imgWidth;\n\n    //adjust y ranges for header height\n    var headerHeight = window.innerHeight * 0.2;\n    var yMin = (y - boxDimensions / 2 - headerHeight) / imgHeight;\n    var yMax = (y + boxDimensions / 2 - headerHeight) / imgHeight;\n\n    return { xMin, xMax, yMin, yMax };\n}","import { useState, useEffect, useRef } from \"react\";\nimport Dropdown from \"./Dropdown\";\nimport TargetBox from \"./TargetBox\";\nimport Feedback from \"./Feedback\";\nimport firebase from \"../firebase\";\nimport \"firebase/firestore\";\nimport \"firebase/storage\";\nimport { computeCoordinateRanges } from \"../util\";\n\n\nfunction GameScreen(props) {\n    const [coords, setCoords] = useState({x: null, y: null});\n    const [searchList, setSearchList] = useState([]);\n    const [userSelection, setUserSelection] = useState({id: null, name: null});\n    const [foundPokemon, setFoundPokemon] = useState(null);\n\n    var userId = props.userId;\n\n    //on mount, set game start time\n    useEffect(() => {\n        async function setupNewUser() {\n            var db = firebase.firestore();\n\n            //set game start time\n            db.collection(\"timestamps\").doc(userId).set({\n                startTime: firebase.firestore.FieldValue.serverTimestamp()\n            });\n        }\n        \n        setupNewUser();\n    }, []);\n\n    //on mount, get main image from firebase\n    useEffect(function getImage() {\n        var storage = firebase.storage();\n\n        storage.ref(\"main-image\").list()\n        .then((ListResult) => {\n            var imageRef = ListResult.items[0];\n            return imageRef.getDownloadURL();\n        })\n        .then((imageURL) => {\n            var mainImageElem = document.getElementById(\"main-image\");\n            mainImageElem.src = imageURL;\n        })\n    }, []);\n\n    //when coords change, get list of pokemon to find\n    useEffect(() => {\n        //get search list if user has clicked image\n        //user has clicked image if coords are set\n        var db = firebase.firestore();\n\n        db.collection(\"users\").doc(userId).get()\n        .then((DocumentSnapshot) => {\n            var pokemonList = DocumentSnapshot.data();\n            var remainingPokemon = [];\n\n            for (const pokemon in pokemonList) {\n                if (!pokemonList[pokemon].found) {\n                    remainingPokemon.push({\n                        id: pokemonList[pokemon].id,\n                        name: pokemonList[pokemon].name\n                    });\n                }\n            }\n            \n            setSearchList(remainingPokemon);\n        });\n        \n    }, [coords.x, coords.y]);\n\n    //validate every new selection\n    useEffect(() => {\n        async function validateSelection() {\n            try {\n                //get coordinate ranges for user selection from firebase\n                var db = firebase.firestore();\n                var pokemonDataSnapshot = await db.collection(\"users\").doc(userId).get();\n                var pokemonData = pokemonDataSnapshot.data();\n                var {\n                    xMin: xMinServer, xMax: xMaxServer,\n                    yMin: yMinServer, yMax: yMaxServer \n                } = pokemonData[userSelection.id].coords;\n        \n                //get coordinate ranges for click event\n                var {\n                    xMin, xMax,\n                    yMin, yMax \n                } = computeCoordinateRanges(coords.x, coords.y);\n        \n                //if ranges do not overlap, incorrect choice\n                if (\n                    (xMin > xMaxServer || xMax < xMinServer) ||\n                    (yMin > yMaxServer || yMax < yMinServer)\n                ) {\n                    setFoundPokemon(false);\n                } else {\n                    setFoundPokemon(true);\n                    \n                    let foundAllPokemon = true;\n\n                    //update pokemon found status to true\n                    //and check if all pokemon have been found\n                    for (const pokemon in pokemonData) {\n                        let currID = pokemonData[pokemon].id;\n\n                        if (!pokemonData[pokemon].found) {\n                            if (currID === userSelection.id) {\n                                db.collection(\"users\").doc(userId).update({\n                                    [`${currID}.found`]: true\n                                });\n                            } else {\n                                foundAllPokemon = false;\n                            }\n                        }\n                    }\n\n                    if (foundAllPokemon) {\n                        //set game end time\n                        await db.collection(\"timestamps\").doc(userId).set({\n                            endTime: firebase.firestore.FieldValue.serverTimestamp()\n                        }, { merge: true });\n                        \n                        props.endGame();\n                    }\n                }\n            } catch (error) {\n                console.log(error);\n            }\n        }\n        \n        if (userSelection.id && foundPokemon === null) {\n            validateSelection();\n        }\n    });\n\n    function handleSelection(click) {\n        if (click.target.tagName !== \"BUTTON\") {\n            console.log(\"Please click a button\");\n            return;\n        }\n\n        var selectionID = click.target.id;\n        var selectionName = click.target.textContent;\n\n        setUserSelection({id: selectionID, name: selectionName});\n    }\n\n    function handleImageClick(click) {\n        var xCoord = click.pageX;\n        var yCoord = click.pageY;\n        \n        //reset state\n        setCoords({x: xCoord, y: yCoord});\n        setSearchList([]);\n        setUserSelection({id: null, name: null});\n        setFoundPokemon(null);\n    }\n\n    return (\n        <div className=\"game-screen\">\n            <Dropdown top={coords.y} left={coords.x} choices={searchList} \n                foundPokemon={foundPokemon} handleClick={handleSelection} />\n            <TargetBox top={coords.y} left={coords.x} \n                foundPokemon={foundPokemon} />\n            {/* render Feedback if foundPokemon !== null */}\n            <Feedback top={coords.y} left={coords.x} foundPokemon={foundPokemon} \n                pokemonName={userSelection.name}\n            />\n            <img \n                id=\"main-image\" onClick={handleImageClick}\n                src=\"\" alt=\"All Pokémon from Generations I-VI\" \n            />\n            <a \n                href=\"https://www.deviantart.com/viking011/art/Pokemon-Poster-436455502\"\n                target=\"_blank\"\n                rel='noreferrer'\n            >Art by Viking011 on DeviantArt</a>\n        </div>\n    );\n}\n\nexport default GameScreen;","import { useState, useEffect } from \"react\";\nimport firebase from \"../firebase\";\nimport \"firebase/firestore\";\n\nfunction EndScreen(props) {\n    const [totalTime, setTotalTime] = useState(null);\n\n    //calculate total time taken to complete game\n    useEffect(() => {\n        async function calculateTime() {\n            var db = firebase.firestore();\n            var DocumentSnapshot = await db.collection(\"timestamps\").doc(props.userId).get();\n            var timestamps = DocumentSnapshot.data();\n            setTotalTime(timestamps.endTime.seconds - timestamps.startTime.seconds);\n        }\n\n        calculateTime();\n    }, []);\n\n    return (\n        <div>\n            <p>Well done!</p>\n            {(totalTime !== null) &&\n                <p>It took you <strong>{totalTime}</strong> seconds to catch them all.</p>\n            }\n        </div>\n    );\n}\n\nexport default EndScreen;","import { useEffect, useRef } from \"react\";\nimport StartScreen from \"./StartScreen\";\nimport GameScreen from \"./GameScreen\";\nimport EndScreen from \"./EndScreen\";\nimport firebase from \"../firebase\";\nimport \"firebase/firestore\";\n\nfunction Main(props) {\n    const userIdRef = useRef(null);\n\n    //on mount, create new user document\n    useEffect(() => {\n        async function createNewUserDoc() {\n            var db = firebase.firestore();\n\n            //get pokemon data from template doc\n            var pokemonDataSnapshot = await db.collection(\"toFind\").doc(\"pokemonList\").get();\n            var pokemonData = pokemonDataSnapshot.data()\n    \n            //copy pokemon data to new user document\n            var userDoc = await db.collection(\"users\").add(pokemonData);\n\n            //store user ID\n            userIdRef.current = userDoc.id;\n        }\n        \n        createNewUserDoc();\n    }, []);\n\n    return (\n        <main>\n            {(props.gameEnded)\n                ? <EndScreen userId={userIdRef.current} />\n                : (props.gameStarted)\n                ? <GameScreen endGame={props.endGame} userId={userIdRef.current} />\n                : <StartScreen startGame={props.startGame} />\n            }\n        </main>\n    );\n}\n\nexport default Main;","import { useState } from \"react\";\nimport Header from \"./components/Header\";\nimport Main from \"./components/Main\";\nimport './App.css';\n\nfunction App() {\n  const [gameStarted, setGameStarted] = useState(false);\n  const [gameEnded, setGameEnded] = useState(false);\n\n  function startGame() {\n    setGameStarted(true);\n  }\n\n  function endGame() {\n    setGameEnded(true);\n  }\n\n  return (\n    <>\n      <Header gameStarted={gameStarted} gameEnded={gameEnded} />\n      <Main gameStarted={gameStarted} gameEnded={gameEnded}\n        startGame={startGame} endGame={endGame} />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}